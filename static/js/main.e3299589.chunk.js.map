{"version":3,"sources":["pages/Quote.js","pages/QuoteGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Quote","parseMonth","m","quote","quotes","map","q","index","d","Date","month","getMonth","day","getDate","key","className","type","Fragment","React","Component","QuoteGenerator","state","parseType","onChange","e","setState","target","value","generate","id","name","rows","cols","this","onClick","App","admin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ggCA4DeA,E,4MAxDXC,WAAa,SAACC,GACV,OAAU,IAANA,EACK,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,KAANA,EACF,MACQ,KAANA,EACF,WADF,G,uDAKA,IAAD,OACAC,EAAQC,EAAOC,KAAI,SAACC,EAAEC,GACxB,IAAIC,EAAI,IAAIC,KACNC,EAAQ,EAAKT,WAAWO,EAAEG,YAC1BC,EAAMJ,EAAEK,UACd,OAAIP,EAAEI,QAAUA,GAASJ,EAAEM,MAAQA,EAE/B,yBAAKE,IAAKP,EAAOQ,UAAU,mBACzB,uBAAGA,UAAU,QAAb,UAAwBT,EAAEI,MAA1B,aAAoCJ,EAAEM,IAAtC,cAA+CN,EAAEU,OACjD,uBAAGD,UAAU,SAAST,EAAEH,OACxB,uBAAGY,UAAU,WAAb,0BAMG,yBAAKD,IAAKP,OAIvB,OACI,kBAAC,IAAMU,SAAP,KACKd,O,GAnDGe,IAAMC,WCiFXC,E,4MAjFXC,MAAQ,CACJlB,MAAO,I,EAGXF,WAAa,SAACC,GACV,OAAU,IAANA,EACK,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,KAANA,EACF,MACQ,KAANA,EACF,WADF,G,EAKXoB,UAAY,SAACpB,GACT,OAAU,IAANA,EACO,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,IAANA,EACF,MACQ,KAANA,EACF,MACQ,KAANA,EACF,WADF,G,EAKbqB,SAAW,SAACC,GACR,EAAKC,SAAS,CAACtB,MAAOqB,EAAEE,OAAOC,S,EAGnCC,SAAW,WACP,IAAIpB,EAAI,IAAIC,KACE,EAAKR,WAAWO,EAAEG,YACpBH,EAAEK,UACD,EAAKS,UAAUd,EAAEG,a,uDAGvB,IAAD,OACN,OACI,yBAAKI,UAAU,aACX,2CACA,8BAAUc,GAAG,QAAQC,KAAK,QAAQC,KAAK,IAAIC,KAAK,KAAKL,MAAOM,KAAKZ,MAAMlB,MAAO+B,QAASD,KAAKL,SAAUL,SAAU,SAACC,GAAO,EAAKD,SAASC,W,GA5EzHN,IAAMC,WC4BpBgB,E,4MAvBbd,MAAQ,CACNe,OAAO,G,uDAGE,IAAD,OASR,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,eAThB,EAAKM,MAAMe,MACN,kBAAC,EAAD,MAEA,kBAAC,EAAD,W,GAVGlB,IAAMC,WCMJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e3299589.chunk.js","sourcesContent":["import React from 'react';\r\nimport quotes from '../quotes.json';\r\n\r\nclass Quote extends React.Component {\r\n    parseMonth = (m) => {\r\n        if (m === 0) {\r\n          return 'Jan'\r\n        } else if (m === 1) {\r\n          return 'Feb'\r\n        } else if (m === 2) {\r\n          return 'Mar'\r\n        } else if (m === 3) {\r\n          return 'Apr'\r\n        } else if (m === 4) {\r\n          return 'May'\r\n        } else if (m === 5) {\r\n          return 'Jun'\r\n        } else if (m === 6) {\r\n          return 'Jul'\r\n        } else if (m === 7) {\r\n          return 'Aug'\r\n        } else if (m === 8) {\r\n          return 'Sep'\r\n        } else if (m === 9) {\r\n          return 'Oct'\r\n        } else if (m === 10) {\r\n          return 'Nov'\r\n        } else if (m === 11) {\r\n          return 'Dec'\r\n        }\r\n    };\r\n\r\n    render () {\r\n        const quote = quotes.map((q,index) => {\r\n            let d = new Date();\r\n            const month = this.parseMonth(d.getMonth());\r\n            const day = d.getDate();\r\n            if (q.month === month && q.day === day) {\r\n              return (\r\n                <div key={index} className='quote-container'>\r\n                  <p className='date'>{`${q.month}. ${q.day} ~ ${q.type}`}</p>\r\n                  <p className='quote'>{q.quote}</p>\r\n                  <p className='content'>\r\n                  ~ By Master Hsing Yun\r\n                  </p>\r\n                </div>\r\n              )\r\n            } else {\r\n              return <div key={index}></div>\r\n            }\r\n        });\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {quote}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Quote;","import React from 'react';\r\n\r\nclass QuoteGenerator extends React.Component {\r\n    state = {\r\n        quote: ''\r\n    }\r\n\r\n    parseMonth = (m) => {\r\n        if (m === 0) {\r\n          return 'Jan'\r\n        } else if (m === 1) {\r\n          return 'Feb'\r\n        } else if (m === 2) {\r\n          return 'Mar'\r\n        } else if (m === 3) {\r\n          return 'Apr'\r\n        } else if (m === 4) {\r\n          return 'May'\r\n        } else if (m === 5) {\r\n          return 'Jun'\r\n        } else if (m === 6) {\r\n          return 'Jul'\r\n        } else if (m === 7) {\r\n          return 'Aug'\r\n        } else if (m === 8) {\r\n          return 'Sep'\r\n        } else if (m === 9) {\r\n          return 'Oct'\r\n        } else if (m === 10) {\r\n          return 'Nov'\r\n        } else if (m === 11) {\r\n          return 'Dec'\r\n        }\r\n    };\r\n\r\n    parseType = (m) => {\r\n        if (m === 0) {\r\n            return 'Jan'\r\n          } else if (m === 1) {\r\n            return 'Feb'\r\n          } else if (m === 2) {\r\n            return 'Mar'\r\n          } else if (m === 3) {\r\n            return 'Apr'\r\n          } else if (m === 4) {\r\n            return 'May'\r\n          } else if (m === 5) {\r\n            return 'Jun'\r\n          } else if (m === 6) {\r\n            return 'Jul'\r\n          } else if (m === 7) {\r\n            return 'Aug'\r\n          } else if (m === 8) {\r\n            return 'Sep'\r\n          } else if (m === 9) {\r\n            return 'Oct'\r\n          } else if (m === 10) {\r\n            return 'Nov'\r\n          } else if (m === 11) {\r\n            return 'Dec'\r\n          }\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({quote: e.target.value});\r\n    };\r\n\r\n    generate = () => {\r\n        let d = new Date();\r\n        const month = this.parseMonth(d.getMonth());\r\n        const day = d.getDate();\r\n        const type = this.parseType(d.getMonth());\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <div className='generator'>\r\n                <p>ENTER QUOTE.</p>\r\n                <textarea id=\"quote\" name=\"quote\" rows=\"4\" cols=\"50\" value={this.state.quote} onClick={this.generate} onChange={(e) => {this.onChange(e)}}/>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default QuoteGenerator;","import React from 'react';\nimport './App.scss';\nimport Quotes from './pages/Quote';\nimport QuoteGenerator from './pages/QuoteGenerator';\n\n\nclass App extends React.Component {\n  state = {\n    admin: false\n  }\n\n  render () {\n    const content = () => {\n      if (this.state.admin) {\n        return <QuoteGenerator/>\n      } else {\n        return <Quotes/>\n      }\n    };\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        {content()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}